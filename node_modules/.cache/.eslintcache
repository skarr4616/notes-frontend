[{"/home/skarr/.local/share/Trash/files/notes-frontend/src/index.tsx":"1","/home/skarr/.local/share/Trash/files/notes-frontend/src/reportWebVitals.ts":"2","/home/skarr/.local/share/Trash/files/notes-frontend/src/App.tsx":"3","/home/skarr/.local/share/Trash/files/notes-frontend/src/DUMMY_NOTES.ts":"4","/home/skarr/.local/share/Trash/files/notes-frontend/src/components/Note/Note.tsx":"5","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/index.tsx":"6","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/reportWebVitals.ts":"7","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx":"8","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/services/notesService.ts":"9","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/components/Note/Note.tsx":"10","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/constants/api.ts":"11"},{"size":560,"mtime":1655918374476,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1655791032422,"results":"14","hashOfConfig":"13"},{"size":2625,"mtime":1655921701443,"results":"15","hashOfConfig":"13"},{"size":859,"mtime":1655915805793,"results":"16","hashOfConfig":"13"},{"size":1767,"mtime":1655921747103,"results":"17","hashOfConfig":"13"},{"size":607,"mtime":1656149060028,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1655791032422,"results":"20","hashOfConfig":"19"},{"size":5131,"mtime":1656167321499,"results":"21","hashOfConfig":"19"},{"size":1222,"mtime":1656166749909,"results":"22","hashOfConfig":"19"},{"size":2342,"mtime":1656263472330,"results":"23","hashOfConfig":"19"},{"size":126,"mtime":1656147378527,"results":"24","hashOfConfig":"19"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3ttwlv",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pvtok9",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/skarr/.local/share/Trash/files/notes-frontend/src/index.tsx",[],[],"/home/skarr/.local/share/Trash/files/notes-frontend/src/reportWebVitals.ts",[],[],"/home/skarr/.local/share/Trash/files/notes-frontend/src/App.tsx",[],[],"/home/skarr/.local/share/Trash/files/notes-frontend/src/DUMMY_NOTES.ts",[],[],"/home/skarr/.local/share/Trash/files/notes-frontend/src/components/Note/Note.tsx",[],[],"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/index.tsx",[],[],"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/reportWebVitals.ts",[],[],"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx",["59","60"],[],"import React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport Note from './components/Note/Note';\nimport INote from './interfaces/note.interface';\nimport { createNote, deleteNote, getNotes, updateNote } from './services/notesService';\nimport { Button, FloatingLabel, Form, Modal } from 'react-bootstrap';\n\nfunction App() {\n\n  // State variable for noteList\n  const [notesList, setNotesList] = useState<INote[]>([]);\n\n  // State variable for Add Note Modal\n  const [showAddNoteModal, setShowAddNoteModal] = useState(false);\n  const [newNote, setNewNote] = useState<Partial<INote>>({\n    text: \"\",\n    link: \"\"\n  });\n\n  const handleCloseAddModal = () => {\n    setNewNote({\n      text: \"\",\n      link: \"\"\n    });\n\n    setShowAddNoteModal(false);\n  };\n  const handleShowAddModal = () => setShowAddNoteModal(true);\n\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    // const listFromStorageString = localStorage.getItem(\"my-notes\");\n\n    // // If not null, use the local storage notes. Else, use DUMMY_NOTES\n    // if (listFromStorageString) {\n    //   const listFromStorageArray = JSON.parse(listFromStorageString);\n    //   setNotesList(listFromStorageArray);\n    // } else {\n    //   setNotesList(DUMMY_NOTES);\n    // }\n\n    getNotesFromServer();\n  }, [])\n\n  // useEffect(() => {\n  //   console.log(\"Saving to local storage\");\n  //   const notesListString = JSON.stringify(notesList);\n  //   localStorage.setItem('my-notes',  notesListString);\n\n  // }, [notesList]);\n\n  const getNotesFromServer = async () => {\n    const notes = await getNotes();\n    setNotesList(notes);\n  }\n\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n  // console.log(\"Rendering\");\n  // console.log(notesList);\n\n  /* Why INote data type ?\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n  const updateNoteItem = async (updatedNote: INote) => {\n\n    const noteFromServer = await updateNote(updatedNote);    \n\n    // console.log(\"Value updated in the app component\");\n    // console.log(updatedNote);\n\n    // Created a temporary variable with updated variable\n    const updatedList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n\n      return noteItem;\n    });\n\n    // Setting the original noteList with updatedList\n    setNotesList(updatedList);\n  }\n\n  const deleteNoteItem = async (noteToDelete: INote) => {\n    const deletedNote = await deleteNote(noteToDelete._id);\n    const remainingNotes = notesList.filter((noteItem) => {\n      return noteItem._id !== noteToDelete._id;\n    });\n\n    setNotesList(remainingNotes);\n  }\n\n  const addNote = async () => {\n    const savedNote = await createNote(newNote);\n    setNotesList([...notesList, savedNote]) ;\n    handleCloseAddModal();\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Button variant=\"dark\" className='add-button' onClick={handleShowAddModal}>\n        <div className='add-btn-text'>+</div>\n      </Button>\n\n      <Modal show={showAddNoteModal} onHide={handleCloseAddModal}>\n\n        <Modal.Header closeButton>\n          <Modal.Title>Add Note</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n\n          <FloatingLabel controlId=\"floatingTextarea2\" label=\"Text\">\n            <Form.Control\n              onChange={(event) => {\n                const newVal = event.currentTarget.value;\n                setNewNote({\n                  ...newNote,\n                  text: newVal\n                });\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter your note text\"\n              style={{ height: '100px' }}\n            />\n          </FloatingLabel>\n\n          <FloatingLabel\n            controlId=\"floatingTextarea\"\n            label=\"Link\"\n            className=\"mb-3 note-link\"\n          >\n            <Form.Control\n              onChange={(event) => {\n                const newVal = event.currentTarget.value;\n                setNewNote({\n                  ...newNote,\n                  link: newVal\n                })\n              }}\n              type=\"url\"\n              placeholder=\"Enter note url\"\n            />\n          </FloatingLabel>\n\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseAddModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={addNote}>\n            Create\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <div className=\"notes-list\">\n        {\n          notesList.map((noteItem, index) => {\n            return (\n              <Note note={noteItem} onNoteUpdate={updateNoteItem} onNoteDelete={deleteNoteItem} key={index} />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/services/notesService.ts",[],[],"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/components/Note/Note.tsx",[],[],"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/constants/api.ts",[],[],{"ruleId":"61","severity":1,"message":"62","line":78,"column":11,"nodeType":"63","messageId":"64","endLine":78,"endColumn":25},{"ruleId":"61","severity":1,"message":"65","line":97,"column":11,"nodeType":"63","messageId":"64","endLine":97,"endColumn":22},"@typescript-eslint/no-unused-vars","'noteFromServer' is assigned a value but never used.","Identifier","unusedVar","'deletedNote' is assigned a value but never used."]