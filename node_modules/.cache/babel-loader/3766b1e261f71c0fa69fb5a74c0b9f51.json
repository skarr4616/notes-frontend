{"ast":null,"code":"var _jsxFileName = \"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css'; // import axios from 'axios';\n\nimport { useState } from \"react\";\nimport DUMMY_NOTES from './DUMMY_NOTES';\nimport Note from './components/Note/Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // State variable\n  const [notesList, setNotesList] = useState([]);\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    setNotesList(DUMMY_NOTES);\n  }, []);\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n  console.log(notesList); // get notes method\n  // const getNotes = async() => {\n  //   try {\n  //     const response = await axios.get(\n  //       'http://localhost:5000/notes'\n  //     );\n  //     setNotesList(response.data.notes);\n  //     console.log(notesList);\n  //   } catch (err) {\n  //     console.error(err);\n  //   }\n  // }\n\n  /*\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n\n  const updateNoteItem = updatedNote => {\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote);\n    const updatedList = notesList.map(noteItem => {\n      console.log(noteItem);\n    });\n    console.log(\"UpdatedList value\");\n    consol;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-list\",\n      children: notesList.map((noteItem, index) => {\n        return /*#__PURE__*/_jsxDEV(Note, {\n          note: noteItem,\n          onNoteUpdate: updateNoteItem\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QMWu7CK2p/pLpniVILqvQilUZuE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DUMMY_NOTES","Note","App","notesList","setNotesList","console","log","updateNoteItem","updatedNote","updatedList","map","noteItem","consol","index"],"sources":["/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n// import axios from 'axios';\nimport { useState } from \"react\";\nimport DUMMY_NOTES from './DUMMY_NOTES';\nimport Note from './components/Note/Note';\nimport INote from './interfaces/note.interface';\n\nfunction App() {\n\n  // State variable\n  const [notesList, setNotesList] = useState<any[]>([]);\n\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    setNotesList(DUMMY_NOTES);\n  }, [])\n\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n  console.log(notesList);\n\n  // get notes method\n  // const getNotes = async() => {\n  //   try {\n  //     const response = await axios.get(\n  //       'http://localhost:5000/notes'\n  //     );\n\n  //     setNotesList(response.data.notes);\n  //     console.log(notesList);\n  //   } catch (err) {\n  //     console.error(err);\n  //   }\n  // }\n\n  /*\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n  const updateNoteItem = (updatedNote: INote) => {\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote);\n\n    const updatedList = notesList.map((noteItem) => {\n      console.log(noteItem);\n    });\n\n    console.log(\"UpdatedList value\");\n    consol\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"notes-list\">\n        {\n          notesList.map((noteItem, index) => {\n            return (\n              <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP,C,CACA;;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EAEb;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAQ,EAAR,CAA1C;EAEA;AACF;AACA;AACA;EACE;;EAEAD,SAAS,CAAC,MAAM;IACdM,YAAY,CAACJ,WAAD,CAAZ;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA;AACF;AACA;AACA;;EACEK,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAnBa,CAqBb;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;;EACE,MAAMI,cAAc,GAAIC,WAAD,IAAwB;IAC7CH,OAAO,CAACC,GAAR,CAAY,oCAAZ;IACAD,OAAO,CAACC,GAAR,CAAYE,WAAZ;IAEA,MAAMC,WAAW,GAAGN,SAAS,CAACO,GAAV,CAAeC,QAAD,IAAc;MAC9CN,OAAO,CAACC,GAAR,CAAYK,QAAZ;IACD,CAFmB,CAApB;IAIAN,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACAM,MAAM;EACP,CAVD;;EAYA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAK,SAAS,EAAC,YAAf;MAAA,UAEIT,SAAS,CAACO,GAAV,CAAc,CAACC,QAAD,EAAWE,KAAX,KAAqB;QACjC,oBACE,QAAC,IAAD;UAAM,IAAI,EAAEF,QAAZ;UAAsB,YAAY,EAAEJ;QAApC,GAAyDM,KAAzD;UAAA;UAAA;UAAA;QAAA,QADF;MAGD,CAJD;IAFJ;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAjEQX,G;;KAAAA,G;AAmET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}