{"ast":null,"code":"import _objectSpread from\"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import'./Note.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// EA6 synatax of writing a function\nvar Note=function Note(_ref){var note=_ref.note,onNoteUpdate=_ref.onNoteUpdate,onNoteDelete=_ref.onNoteDelete;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var noteTextUpdated=function noteTextUpdated(event){setIsFocused(false);var newTextValue=event.currentTarget.textContent;// Check is newTextValue is different from the original or not\nif(newTextValue===note.text){return;}// We have defined the data type of updatedNoteObject \nconsole.log(\"Notes text changed\");var updatedNoteObject=_objectSpread(_objectSpread({},note),{},{// If newTextValue is null, it will receive empty string value\ntext:newTextValue||\"\"});// Update the original note with new updatedNoteObject\nonNoteUpdate(updatedNoteObject);};// console.log(\"value of isFocused is \", isFocused, \"Note text is \", note.text);\n/*  No Index (Why?)\n        Index is not required as it is provided by the map function in \n        App.tsx\n    */ // BEM naming convention is followed here.    \nreturn/*#__PURE__*/_jsxs(\"div\",{className:isFocused?\"note note--focused\":\"note\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){onNoteDelete(note);},type:\"button\",className:\"btn-close\",\"aria-label\":\"Close\"}),/*#__PURE__*/_jsx(\"div\",{onBlur:noteTextUpdated,onFocus:function onFocus(){setIsFocused(true);},contentEditable:true,suppressContentEditableWarning:true,className:\"note__text\",children:note.text}),/*#__PURE__*/_jsx(\"div\",{className:\"note__link\",children:/*#__PURE__*/_jsx(\"a\",{href:note.link,children:note.link})})]});};export default Note;","map":{"version":3,"names":["useState","Note","note","onNoteUpdate","onNoteDelete","isFocused","setIsFocused","noteTextUpdated","event","newTextValue","currentTarget","textContent","text","console","log","updatedNoteObject","link"],"sources":["/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/components/Note/Note.tsx"],"sourcesContent":["import { FC, FocusEvent, useState } from 'react';\nimport INote from '../../interfaces/note.interface';\nimport './Note.css';\n\ntype Props = {\n    note: INote;\n    onNoteUpdate: (note: INote) => void;\n    onNoteDelete: (note: INote) => void;\n}\n\n// EA6 synatax of writing a function\nconst Note: FC<Props> = ({ note, onNoteUpdate, onNoteDelete }) => {\n\n    const [isFocused, setIsFocused] = useState(false);\n    const noteTextUpdated = (event: FocusEvent<HTMLDivElement, Element>) => {\n\n        setIsFocused(false);\n        const newTextValue = event.currentTarget.textContent;\n\n        // Check is newTextValue is different from the original or not\n        if (newTextValue === note.text) {\n            return;\n        }\n\n        // We have defined the data type of updatedNoteObject \n        console.log(\"Notes text changed\");\n        const updatedNoteObject: INote = {\n            /*\n                ...note puts all the value of previous note, but changes\n                the parameters stated later\n            */\n            ...note,\n\n            // If newTextValue is null, it will receive empty string value\n            text: newTextValue || \"\",\n        };\n\n        // Update the original note with new updatedNoteObject\n        onNoteUpdate(updatedNoteObject);\n    }\n\n    // console.log(\"value of isFocused is \", isFocused, \"Note text is \", note.text);\n\n    /*  No Index (Why?)\n        Index is not required as it is provided by the map function in \n        App.tsx\n    */\n    // BEM naming convention is followed here.    \n    return (\n        <div className={isFocused ? \"note note--focused\" : \"note\"}>\n            <button\n                onClick={() => {\n                    onNoteDelete(note);\n                }}\n                type=\"button\"\n                className=\"btn-close\"\n                aria-label=\"Close\">\n            </button>\n            <div\n                onBlur={noteTextUpdated}\n                onFocus={() => {\n                    setIsFocused(true);\n                }}\n                contentEditable={true}\n                suppressContentEditableWarning={true}\n                className=\"note__text\"\n            >\n                {note.text}\n            </div>\n            <div className=\"note__link\">\n                <a href={note.link}>{note.link}</a>\n            </div>\n        </div>\n    );\n}\n\nexport default Note;\n"],"mappings":"iRAAA,OAAyBA,QAAzB,KAAyC,OAAzC,CAEA,MAAO,YAAP,C,wFAQA;AACA,GAAMC,KAAe,CAAG,QAAlBA,KAAkB,MAA0C,IAAvCC,KAAuC,MAAvCA,IAAuC,CAAjCC,YAAiC,MAAjCA,YAAiC,CAAnBC,YAAmB,MAAnBA,YAAmB,CAE9D,cAAkCJ,QAAQ,CAAC,KAAD,CAA1C,wCAAOK,SAAP,eAAkBC,YAAlB,eACA,GAAMC,gBAAe,CAAG,QAAlBA,gBAAkB,CAACC,KAAD,CAAgD,CAEpEF,YAAY,CAAC,KAAD,CAAZ,CACA,GAAMG,aAAY,CAAGD,KAAK,CAACE,aAAN,CAAoBC,WAAzC,CAEA;AACA,GAAIF,YAAY,GAAKP,IAAI,CAACU,IAA1B,CAAgC,CAC5B,OACH,CAED;AACAC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACA,GAAMC,kBAAwB,gCAKvBb,IALuB,MAO1B;AACAU,IAAI,CAAEH,YAAY,EAAI,EARI,EAA9B,CAWA;AACAN,YAAY,CAACY,iBAAD,CAAZ,CACH,CAzBD,CA2BA;AAEA;AACJ;AACA;AACA,MAnCkE,CAoC9D;AACA,mBACI,aAAK,SAAS,CAAEV,SAAS,CAAG,oBAAH,CAA0B,MAAnD,wBACI,eACI,OAAO,CAAE,kBAAM,CACXD,YAAY,CAACF,IAAD,CAAZ,CACH,CAHL,CAII,IAAI,CAAC,QAJT,CAKI,SAAS,CAAC,WALd,CAMI,aAAW,OANf,EADJ,cASI,YACI,MAAM,CAAEK,eADZ,CAEI,OAAO,CAAE,kBAAM,CACXD,YAAY,CAAC,IAAD,CAAZ,CACH,CAJL,CAKI,eAAe,CAAE,IALrB,CAMI,8BAA8B,CAAE,IANpC,CAOI,SAAS,CAAC,YAPd,UASKJ,IAAI,CAACU,IATV,EATJ,cAoBI,YAAK,SAAS,CAAC,YAAf,uBACI,UAAG,IAAI,CAAEV,IAAI,CAACc,IAAd,UAAqBd,IAAI,CAACc,IAA1B,EADJ,EApBJ,GADJ,CA0BH,CA/DD,CAiEA,cAAef,KAAf"},"metadata":{},"sourceType":"module"}