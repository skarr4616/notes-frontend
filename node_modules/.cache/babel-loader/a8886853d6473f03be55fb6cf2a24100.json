{"ast":null,"code":"var _jsxFileName = \"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport Note from './components/Note/Note';\nimport { getNotes } from './services/notesService';\nimport { Button, FloatingLabel, Form, Modal } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // State variable for noteList\n  const [notesList, setNotesList] = useState([]); // State variable for Add Note Modal\n\n  const [showAddNoteModal, setShowAddNoteModal] = useState(false);\n  const [newNote, setNewNote] = useState({\n    text: \"\",\n    link: \"\"\n  });\n\n  const handleCloseAddModal = () => setShowAddNoteModal(false);\n\n  const handleShowAddModal = () => setShowAddNoteModal(true);\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n\n  useEffect(() => {\n    // const listFromStorageString = localStorage.getItem(\"my-notes\");\n    // // If not null, use the local storage notes. Else, use DUMMY_NOTES\n    // if (listFromStorageString) {\n    //   const listFromStorageArray = JSON.parse(listFromStorageString);\n    //   setNotesList(listFromStorageArray);\n    // } else {\n    //   setNotesList(DUMMY_NOTES);\n    // }\n    getNotesFromServer();\n  }, []); // useEffect(() => {\n  //   console.log(\"Saving to local storage\");\n  //   const notesListString = JSON.stringify(notesList);\n  //   localStorage.setItem('my-notes',  notesListString);\n  // }, [notesList]);\n\n  const getNotesFromServer = async () => {\n    const notes = await getNotes();\n    setNotesList(notes);\n  };\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n\n  console.log(\"Rendering\");\n  console.log(notesList);\n  /* Why INote data type ?\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n\n  const updateNoteItem = updatedNote => {\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote); // Created a temporary variable with updated variable\n\n    const updatedList = notesList.map(noteItem => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n\n      return noteItem;\n    }); // Setting the original noteList with updatedList\n\n    setNotesList(updatedList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleShowAddModal,\n      children: \"Launch demo modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showAddNoteModal,\n      onHide: handleCloseAddModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Add Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(FloatingLabel, {\n          controlId: \"floatingTextarea2\",\n          label: \"Text\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            onChange: event => {\n              const newVal = event.currentTarget.value;\n              setNewNote({ ...newNote\n              });\n            },\n            as: \"textarea\",\n            placeholder: \"Enter your note text\",\n            style: {\n              height: '100px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FloatingLabel, {\n          controlId: \"floatingTextarea\",\n          label: \"Link\",\n          className: \"mb-3 note-link\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            onChange: event => {},\n            type: \"url\",\n            placeholder: \"Enter note url\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleCloseAddModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleCloseAddModal,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-list\",\n      children: notesList.map((noteItem, index) => {\n        return /*#__PURE__*/_jsxDEV(Note, {\n          note: noteItem,\n          onNoteUpdate: updateNoteItem\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"aTiR29nG6EWicTeNm/ir34z/5w0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Note","getNotes","Button","FloatingLabel","Form","Modal","App","notesList","setNotesList","showAddNoteModal","setShowAddNoteModal","newNote","setNewNote","text","link","handleCloseAddModal","handleShowAddModal","getNotesFromServer","notes","console","log","updateNoteItem","updatedNote","updatedList","map","noteItem","_id","event","newVal","currentTarget","value","height","index"],"sources":["/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport Note from './components/Note/Note';\nimport INote from './interfaces/note.interface';\nimport { getNotes } from './services/notesService';\nimport { Button, FloatingLabel, Form, Modal } from 'react-bootstrap';\n\nfunction App() {\n\n  // State variable for noteList\n  const [notesList, setNotesList] = useState<INote[]>([]);\n\n  // State variable for Add Note Modal\n  const [showAddNoteModal, setShowAddNoteModal] = useState(false);\n  const [newNote, setNewNote] = useState<Partial<INote>>({\n    text: \"\",\n    link: \"\"\n  });\n\n  const handleCloseAddModal = () => setShowAddNoteModal(false);\n  const handleShowAddModal = () => setShowAddNoteModal(true);\n\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    // const listFromStorageString = localStorage.getItem(\"my-notes\");\n\n    // // If not null, use the local storage notes. Else, use DUMMY_NOTES\n    // if (listFromStorageString) {\n    //   const listFromStorageArray = JSON.parse(listFromStorageString);\n    //   setNotesList(listFromStorageArray);\n    // } else {\n    //   setNotesList(DUMMY_NOTES);\n    // }\n\n    getNotesFromServer();\n  }, [])\n\n  // useEffect(() => {\n  //   console.log(\"Saving to local storage\");\n  //   const notesListString = JSON.stringify(notesList);\n  //   localStorage.setItem('my-notes',  notesListString);\n\n  // }, [notesList]);\n\n  const getNotesFromServer = async () => {\n    const notes = await getNotes();\n    setNotesList(notes);\n  }\n\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n  console.log(\"Rendering\");\n  console.log(notesList);\n\n  /* Why INote data type ?\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n  const updateNoteItem = (updatedNote: INote) => {\n\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote);\n\n    // Created a temporary variable with updated variable\n    const updatedList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n\n      return noteItem;\n    });\n\n    // Setting the original noteList with updatedList\n    setNotesList(updatedList);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Button variant=\"primary\" onClick={handleShowAddModal}>\n        Launch demo modal\n      </Button>\n\n      <Modal show={showAddNoteModal} onHide={handleCloseAddModal}>\n\n        <Modal.Header closeButton>\n          <Modal.Title>Add Note</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n\n          <FloatingLabel controlId=\"floatingTextarea2\" label=\"Text\">\n            <Form.Control\n              onChange={(event) => {\n                const newVal = event.currentTarget.value;\n                setNewNote({\n                  ...newNote,\n                })\n              }}\n              as=\"textarea\"\n              placeholder=\"Enter your note text\"\n              style={{ height: '100px' }}\n            />\n          </FloatingLabel>\n\n          <FloatingLabel\n            controlId=\"floatingTextarea\"\n            label=\"Link\"\n            className=\"mb-3 note-link\"\n          >\n            <Form.Control\n              onChange={(event) => {}}\n              type=\"url\"\n              placeholder=\"Enter note url\"\n            />\n          </FloatingLabel>\n\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseAddModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleCloseAddModal}>\n            Create\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <div className=\"notes-list\">\n        {\n          notesList.map((noteItem, index) => {\n            return (\n              <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}