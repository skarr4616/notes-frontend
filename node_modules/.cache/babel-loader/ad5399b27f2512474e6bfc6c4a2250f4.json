{"ast":null,"code":"var _jsxFileName = \"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport Note from './components/Note/Note';\nimport { getNotes } from './services/notesService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // State variable\n  const [notesList, setNotesList] = useState([]);\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    // const listFromStorageString = localStorage.getItem(\"my-notes\");\n    // // If not null, use the local storage notes. Else, use DUMMY_NOTES\n    // if (listFromStorageString) {\n    //   const listFromStorageArray = JSON.parse(listFromStorageString);\n    //   setNotesList(listFromStorageArray);\n    // } else {\n    //   setNotesList(DUMMY_NOTES);\n    // }\n    const notesFromBackend = getNotes();\n  }, []);\n  useEffect(() => {\n    console.log(\"Saving to local storage\");\n    const notesListString = JSON.stringify(notesList);\n    localStorage.setItem('my-notes', notesListString);\n  }, [notesList]);\n\n  const getNotesFromServer = async () => {\n    const notes = await getNotes();\n    console.log(notes);\n  };\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n\n  console.log(\"Rendering\");\n  console.log(notesList);\n  /* Why INote data type\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n\n  const updateNoteItem = updatedNote => {\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote); // Created a temporary variable with updated variable\n\n    const updatedList = notesList.map(noteItem => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n\n      return noteItem;\n    }); // Setting the original noteList with updatedList\n\n    setNotesList(updatedList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-list\",\n      children: notesList.map((noteItem, index) => {\n        return /*#__PURE__*/_jsxDEV(Note, {\n          note: noteItem,\n          onNoteUpdate: updateNoteItem\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"b1sZvc5cFTMKxBl7nMCgYeF1g8E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Note","getNotes","App","notesList","setNotesList","notesFromBackend","console","log","notesListString","JSON","stringify","localStorage","setItem","getNotesFromServer","notes","updateNoteItem","updatedNote","updatedList","map","noteItem","_id","index"],"sources":["/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { useState } from \"react\";\nimport Note from './components/Note/Note';\nimport INote from './interfaces/note.interface';\nimport { getNotes } from './services/notesService';\n\nfunction App() {\n\n  // State variable\n  const [notesList, setNotesList] = useState<INote[]>([]);\n\n  /* Infinite loop\n    Prevents infinite loop of function call and then render and then again \n    function call loop.\n  */\n  // Use effect is used to call a function only one time an object renders.\n\n  useEffect(() => {\n    // const listFromStorageString = localStorage.getItem(\"my-notes\");\n    \n    // // If not null, use the local storage notes. Else, use DUMMY_NOTES\n    // if (listFromStorageString) {\n    //   const listFromStorageArray = JSON.parse(listFromStorageString);\n    //   setNotesList(listFromStorageArray);\n    // } else {\n    //   setNotesList(DUMMY_NOTES);\n    // }\n\n    const notesFromBackend =  getNotes();\n  }, [])\n\n  useEffect(() => {\n    console.log(\"Saving to local storage\");\n    const notesListString = JSON.stringify(notesList);\n    localStorage.setItem('my-notes',  notesListString);\n\n  }, [notesList]);\n\n  const getNotesFromServer = async () => {\n    const notes = await getNotes();\n    console.log(notes);\n  }\n\n  /* Twice console log\n    You see two console logs becase strict mode is enabled which renders the \n    code twice in developement mode but not in production.\n  */\n\n  console.log(\"Rendering\");\n  console.log(notesList);\n\n  /* Why INote data type\n    We want to get the note from the child so that we can update\n    the whole note, not just the text value.\n    To do this, we get the INote data type\n  */\n  const updateNoteItem = (updatedNote: INote) => {\n\n    console.log(\"Value updated in the app component\");\n    console.log(updatedNote);\n\n    // Created a temporary variable with updated variable\n    const updatedList = notesList.map((noteItem: INote) => {\n      if (noteItem._id === updatedNote._id) {\n        return updatedNote;\n      }\n\n      return noteItem;\n    });\n\n    // Setting the original noteList with updatedList\n    setNotesList(updatedList);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"notes-list\">\n        {\n          notesList.map((noteItem, index) => {\n            return (\n              <Note note={noteItem} onNoteUpdate={updateNoteItem} key={index} />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAU,EAAV,CAA1C;EAEA;AACF;AACA;AACA;EACE;;EAEAD,SAAS,CAAC,MAAM;IACd;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMO,gBAAgB,GAAIJ,QAAQ,EAAlC;EACD,CAZQ,EAYN,EAZM,CAAT;EAcAH,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAR,CAAY,yBAAZ;IACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeP,SAAf,CAAxB;IACAQ,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAkCJ,eAAlC;EAED,CALQ,EAKN,CAACL,SAAD,CALM,CAAT;;EAOA,MAAMU,kBAAkB,GAAG,YAAY;IACrC,MAAMC,KAAK,GAAG,MAAMb,QAAQ,EAA5B;IACAK,OAAO,CAACC,GAAR,CAAYO,KAAZ;EACD,CAHD;EAKA;AACF;AACA;AACA;;;EAEER,OAAO,CAACC,GAAR,CAAY,WAAZ;EACAD,OAAO,CAACC,GAAR,CAAYJ,SAAZ;EAEA;AACF;AACA;AACA;AACA;;EACE,MAAMY,cAAc,GAAIC,WAAD,IAAwB;IAE7CV,OAAO,CAACC,GAAR,CAAY,oCAAZ;IACAD,OAAO,CAACC,GAAR,CAAYS,WAAZ,EAH6C,CAK7C;;IACA,MAAMC,WAAW,GAAGd,SAAS,CAACe,GAAV,CAAeC,QAAD,IAAqB;MACrD,IAAIA,QAAQ,CAACC,GAAT,KAAiBJ,WAAW,CAACI,GAAjC,EAAsC;QACpC,OAAOJ,WAAP;MACD;;MAED,OAAOG,QAAP;IACD,CANmB,CAApB,CAN6C,CAc7C;;IACAf,YAAY,CAACa,WAAD,CAAZ;EACD,CAhBD;;EAkBA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAK,SAAS,EAAC,YAAf;MAAA,UAEId,SAAS,CAACe,GAAV,CAAc,CAACC,QAAD,EAAWE,KAAX,KAAqB;QACjC,oBACE,QAAC,IAAD;UAAM,IAAI,EAAEF,QAAZ;UAAsB,YAAY,EAAEJ;QAApC,GAAyDM,KAAzD;UAAA;UAAA;UAAA;QAAA,QADF;MAGD,CAJD;IAFJ;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAjFQnB,G;;KAAAA,G;AAmFT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}