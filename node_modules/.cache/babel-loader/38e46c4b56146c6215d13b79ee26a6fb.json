{"ast":null,"code":"var _jsxFileName = \"/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/components/Note/Note.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './Note.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// EA6 synatax of writing a function\nconst Note = _ref => {\n  _s();\n\n  let {\n    note,\n    onNoteUpdate\n  } = _ref;\n  const [isFocused, setIsFocused] = useState(false);\n\n  const noteTextUpdated = event => {\n    const newTextValue = event.currentTarget.textContent; // Check is newTextValue is different from the original or not\n\n    if (newTextValue === note.text) {\n      return;\n    } // We have defined the data type of updatedNoteObject \n\n\n    console.log(\"Notes text changed\");\n    const updatedNoteObject = {\n      /*\n          ...note puts all the value of previous note, but changes\n          the parameters stated later\n      */\n      ...note,\n      // If newTextValue is null, it will receive empty string value\n      text: newTextValue || \"\"\n    }; // Update the original note with new updatedNoteObject\n\n    onNoteUpdate(updatedNoteObject);\n  };\n\n  console.log(\"value of isFocused is \", isFocused);\n  /*  No Index (Why?)\n      Index is not required as it is provided by the map function in \n      App.tsx\n  */\n  // BEM naming convention is followed here.    \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: noteTextUpdated,\n      onFocus: () => {\n        setIsFocused(true);\n      },\n      contentEditable: true,\n      suppressContentEditableWarning: true,\n      className: \"note__text\",\n      children: note.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note__link\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: note.link,\n        children: note.link\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Note, \"taoS6m9NZex5dx3pinefKTdpShE=\");\n\n_c = Note;\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["useState","Note","note","onNoteUpdate","isFocused","setIsFocused","noteTextUpdated","event","newTextValue","currentTarget","textContent","text","console","log","updatedNoteObject","link"],"sources":["/home/skarr/Desktop/CSE Courses/MERN/notes-frontend/src/components/Note/Note.tsx"],"sourcesContent":["import { FC, FocusEvent, useState } from 'react';\nimport INote from '../../interfaces/note.interface';\nimport './Note.css';\n\ntype Props = {\n    note: INote;\n    onNoteUpdate: (note: INote) => void;\n} \n\n// EA6 synatax of writing a function\nconst Note: FC<Props> = ({note, onNoteUpdate}) => {\n\n    const [isFocused, setIsFocused] = useState(false);\n    const noteTextUpdated = (event: FocusEvent<HTMLDivElement, Element>) => {\n        const newTextValue = event.currentTarget.textContent;\n        \n        // Check is newTextValue is different from the original or not\n        if (newTextValue === note.text) {\n            return;\n        }\n\n        // We have defined the data type of updatedNoteObject \n        console.log(\"Notes text changed\");\n        const updatedNoteObject: INote = {\n            /*\n                ...note puts all the value of previous note, but changes\n                the parameters stated later\n            */\n            ...note,\n            \n            // If newTextValue is null, it will receive empty string value\n            text: newTextValue || \"\",\n        };\n\n        // Update the original note with new updatedNoteObject\n        onNoteUpdate(updatedNoteObject);\n    }\n\n    console.log(\"value of isFocused is \", isFocused);\n \n    /*  No Index (Why?)\n        Index is not required as it is provided by the map function in \n        App.tsx\n    */\n    // BEM naming convention is followed here.    \n    return (\n        <div className=\"note\">\n            <div\n                onBlur={noteTextUpdated}\n                onFocus={() => {\n                    setIsFocused(true);\n                }}\n                contentEditable={true} \n                suppressContentEditableWarning={true} \n                className=\"note__text\"\n            >\n                {note.text}\n            </div>\n            <div className=\"note__link\">\n                <a href={note.link}>{note.link}</a>\n            </div>\n        </div>\n    );\n}\n\nexport default Note;\n"],"mappings":";;;AAAA,SAAyBA,QAAzB,QAAyC,OAAzC;AAEA,OAAO,YAAP;;;AAOA;AACA,MAAMC,IAAe,GAAG,QAA0B;EAAA;;EAAA,IAAzB;IAACC,IAAD;IAAOC;EAAP,CAAyB;EAE9C,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;;EACA,MAAMM,eAAe,GAAIC,KAAD,IAAgD;IACpE,MAAMC,YAAY,GAAGD,KAAK,CAACE,aAAN,CAAoBC,WAAzC,CADoE,CAGpE;;IACA,IAAIF,YAAY,KAAKN,IAAI,CAACS,IAA1B,EAAgC;MAC5B;IACH,CANmE,CAQpE;;;IACAC,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACA,MAAMC,iBAAwB,GAAG;MAC7B;AACZ;AACA;AACA;MACY,GAAGZ,IAL0B;MAO7B;MACAS,IAAI,EAAEH,YAAY,IAAI;IARO,CAAjC,CAVoE,CAqBpE;;IACAL,YAAY,CAACW,iBAAD,CAAZ;EACH,CAvBD;;EAyBAF,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCT,SAAtC;EAEA;AACJ;AACA;AACA;EACI;;EACA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI;MACI,MAAM,EAAEE,eADZ;MAEI,OAAO,EAAE,MAAM;QACXD,YAAY,CAAC,IAAD,CAAZ;MACH,CAJL;MAKI,eAAe,EAAE,IALrB;MAMI,8BAA8B,EAAE,IANpC;MAOI,SAAS,EAAC,YAPd;MAAA,UASKH,IAAI,CAACS;IATV;MAAA;MAAA;MAAA;IAAA,QADJ,eAYI;MAAK,SAAS,EAAC,YAAf;MAAA,uBACI;QAAG,IAAI,EAAET,IAAI,CAACa,IAAd;QAAA,UAAqBb,IAAI,CAACa;MAA1B;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAZJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH,CArDD;;GAAMd,I;;KAAAA,I;AAuDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}